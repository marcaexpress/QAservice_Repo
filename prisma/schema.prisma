// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Configuración del seed
/// @seed="npx tsx prisma/seed.ts"

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String?  // Campo para autenticación con credenciales
  name           String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  roles         RoleAssignment[]
  
  @@map("users")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  users     User[]
  roles     Role[]
  
  @@map("organizations")
}

model Role {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  organization   Organization? @relation(fields: [organizationId], references: [id])
  permissions   RolePermission[]
  users         RoleAssignment[]
  
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  action      String   // e.g., "create", "read", "update", "delete"
  resource   String   // e.g., "page", "user", "organization"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  roles      RolePermission[]
  
  @@unique([action, resource])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  
  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model RoleAssignment {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("role_assignments")
}
