name: CI/CD Pipeline - Vercel Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      continue-on-error: true
    
    - name: Run linting (non-blocking)
      run: npm run lint
      continue-on-error: true
    
    - name: Run type checking (non-blocking)
      run: npm run typecheck
      continue-on-error: true
    
    - name: Build application (Development)
      run: npm run build
      env:
        NODE_ENV: development
        DATABASE_URL: ${{ secrets.DATABASE_URL_DEVELOPMENT }}
        JWT_SECRET: ${{ secrets.JWT_SECRET_DEVELOPMENT }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Clean Vercel Configuration
      run: |
        echo "Cleaning Vercel configuration..."
        if [ -d ".vercel" ]; then
          rm -rf .vercel
          echo "Removed .vercel directory"
        fi
    
    - name: Deploy to Vercel (Production)
      run: |
        echo "Deploying to Vercel with production configuration..."
        vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes --force
      env:
        NODE_ENV: production
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        DATABASE_URL: ${{ secrets.DATABASE_URL_PRODUCTION }}
        JWT_SECRET: ${{ secrets.JWT_SECRET_PRODUCTION }}
