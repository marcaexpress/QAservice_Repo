El proyecto QA Services consiste en una plataforma digital integral que ofrece servicios de consultor√≠a en testing de software con un fuerte componente de aprendizaje y colaboraci√≥n. Su objetivo funcional es convertirse en un espacio √∫nico donde empresas, profesionales y estudiantes puedan acceder a servicios de QA manual, automatizado, de performance, accesibilidad y compatibilidad, junto con un CMS low-code altamente robusto para gestionar y crear contenidos interactivos sin necesidad de conocimientos t√©cnicos.

Funcionalmente, la plataforma se organiza en dos pilares:

Servicios profesionales de QA: los usuarios (empresas o aut√≥nomos) podr√°n contratar pruebas, gestionar proyectos de testing, coordinar equipos, y acceder a reportes claros y trazables. Se incluyen modelos flexibles de contrataci√≥n y colaboraci√≥n, adaptados tanto a pymes como a grandes consultoras.

M√≥dulo de aprendizaje y simulaci√≥n: se integra un CMS que permite crear, editar y consumir contenidos de formaci√≥n, art√≠culos, proyectos simulados y ejercicios pr√°cticos, con plantillas din√°micas y elementos funcionales (formularios, pasarelas simuladas, escenarios interactivos). Este m√≥dulo se alinea con est√°ndares como ISTQB y fomenta el aprendizaje pr√°ctico y aut√≥nomo.

En conjunto, QA Services funciona como un hub de servicios y conocimiento en QA, ofreciendo valor inmediato a clientes mediante pruebas profesionales y asegurando a largo plazo un ecosistema educativo que fortalece la comunidad y el talento en testing.




Instrucciones maestras para Cursor (copiar/pegar)

Contrato de Cambios (obligatorio)

Solo realiza CAMBIOS EXPL√çCITOS solicitados.

PROHIBIDO borrar/renombrar/mover archivos o funciones si no se pide.

Mant√©n compatibilidad retro (no rompas firmas p√∫blicas) salvo autorizaci√≥n expl√≠cita.

Si una instrucci√≥n es ambigua, pregunta; si no puedes, no cambies.

Trabajo por Lotes

Lote m√°ximo: 1 archivo o ‚â§50 l√≠neas modificadas.

Flujo de cada lote: Plan ‚Üí Implementa ‚Üí Pruebas ‚Üí Diff ‚Üí Resumen.

Antes de escribir c√≥digo, muestra PLAN BREVE (tareas enumeradas).

Tras implementar, genera diff y pide confirmaci√≥n si hay dudas.

Pruebas Unitarias y Verificaci√≥n

Cada lote debe incluir o actualizar tests unitarios (coverage del cambio).

Ejecuta script test y reporta: tests a√±adidos, casos cubiertos, resultado.

Si falla algo, no avances de lote: corrige y vuelve a ejecutar.

Autoguardado de Contexto

Mant√©n un CONTEXT.md en la ra√≠z. En cada lote, a√±ade:

Objetivo del lote, archivos tocados, decisiones, TODOs pendientes, comandos usados.

Mant√©n un CHANGELOG.md con entradas: fecha, lote #, resumen, riesgos.

Pol√≠ticas de Escritura

Cambios idempotentes y m√≠nimos.

No reordenes c√≥digo ni "embellezcas" fuera del alcance.

No introduces dependencias sin pedirlo; si son necesarias, prop√≥n alternativas.

Protecci√≥n de Archivos

Lista de archivos inviolables (edici√≥n solo con permiso):

package.json, tsconfig.json, pipelines CI/CD, migraciones ya aplicadas, esquemas DB estables.

Plantilla de Lote (usar siempre)

# Lote N
Objetivo:
Alcance exacto:
Archivos a tocar (y por qu√©):
Plan paso a paso (3-5 pasos):
Pruebas a a√±adir/actualizar (describe casos):
Riesgos/compatibilidad:


Plantilla de PR/Commit

Mensaje: feat(scope): acci√≥n concreta o fix(scope): ‚Ä¶

Cuerpo: Qu√© cambi√≥, por qu√©, impacto, c√≥mo probar (npm test, ruta e2e si aplica).

Reglas de Confirmaci√≥n

Antes de escribir: muestra PLAN y espera confirmaci√≥n si hay ambig√ºedad.

Despu√©s de escribir: muestra diff y resumen t√©cnico (‚â§10 l√≠neas).

Definici√≥n de Hecho (DoD)

C√≥digo y tests pasan localmente.

CONTEXT.md y CHANGELOG.md actualizados.

Sin cambios fuera de alcance.

Linter/formatter OK, sin nuevas vulnerabilidades.

Fallbacks

Si faltan datos, crea stubs + tests marcados @todo y registra limitaciones en CONTEXT.md.

Prompt corto para cada tarea

"Act√∫a como pair programmer estricto. Aplica Contrato de Cambios y Trabajo por Lotes. Implementa SOLO lo pedido. Entrega: PLAN ‚Üí implementaci√≥n m√≠nima ‚Üí tests ‚Üí diff ‚Üí resumen ‚Üí actualizaci√≥n de CONTEXT.md/CHANGELOG.md. Lote ‚â§1 archivo o ‚â§50 l√≠neas."

## üö® **RESUMEN EJECUTIVO DE PROBLEMAS CR√çTICOS DETECTADOS**

### **ESTADO ACTUAL DEL PROYECTO**
El proyecto QA Services se encuentra en **FASE ALFA** con m√∫ltiples problemas cr√≠ticos que requieren resoluci√≥n inmediata antes de continuar con el desarrollo del Release 1.

### **PROBLEMAS CR√çTICOS IDENTIFICADOS**

#### **üî¥ AUTENTICACI√ìN DUPLICADA (CR√çTICO)**
- **Dos sistemas paralelos**: JWT personalizado + NextAuth incompleto
- **Seguridad comprometida**: JWT_SECRET hardcodeado, cookies inseguras
- **Middleware inconsistente**: Verificaci√≥n de tokens sin validar firma

#### **üî¥ CMS NO FUNCIONAL (CR√çTICO)**
- **Interfaz visual sin funcionalidad**: Solo estructura b√°sica est√°tica
- **@dnd-kit instalado pero no usado**: Librer√≠a de drag & drop presente pero sin implementar
- **Sin persistencia real**: No hay guardado de cambios del CMS

#### **üî¥ ARQUITECTURA INCOMPLETA (ALTO)**
- **Esquemas de base de datos limitados**: Falta modelos para CMS, p√°ginas, contenido
- **Tests ausentes**: No hay cobertura de c√≥digo ni tests unitarios
- **Configuraci√≥n insegura**: Variables de entorno expuestas en repositorio

### **PLAN DE ACCI√ìN INMEDIATO**

#### **SEMANA 1-2: FUNDACIONES CR√çTICAS**
1. **Resolver autenticaci√≥n**: Elegir sistema √∫nico (NextAuth.js v5 recomendado)
2. **Implementar drag & drop real**: Usar @dnd-kit instalado
3. **Crear esquemas de base de datos**: Modelos para CMS y contenido
4. **Implementar persistencia**: Guardado real de cambios del CMS

#### **SEMANA 3-4: FUNCIONALIDAD CMS**
1. **Completar editor visual**: Funcionalidad de edici√≥n real
2. **Sistema de bloques**: Tipos editables funcionales
3. **Tests unitarios**: Cobertura b√°sica del c√≥digo
4. **CI/CD b√°sico**: Tests autom√°ticos

### **RECOMENDACIONES T√âCNICAS**

1. **Consolidar en NextAuth.js v5**: Sistema de autenticaci√≥n est√°ndar y robusto
2. **Implementar CMS funcional**: Usar @dnd-kit para drag & drop real
3. **Crear esquemas completos**: Modelos para p√°ginas, bloques, contenido
4. **Implementar testing**: Cobertura m√≠nima del 60% del c√≥digo
5. **Configurar entorno seguro**: Variables de entorno apropiadas

### **IMPACTO EN ROADMAP**
- **Release 1 retrasado**: Requiere refactorizaci√≥n completa antes de continuar
- **Timeline afectado**: 2-3 semanas adicionales para resolver problemas cr√≠ticos
- **Recursos necesarios**: Equipo completo dedicado a refactorizaci√≥n

### **CONCLUSI√ìN**
**NO CONTINUAR CON RELEASE 1** hasta resolver los problemas cr√≠ticos de autenticaci√≥n, CMS funcional y arquitectura base. El proyecto requiere una refactorizaci√≥n completa de las fundaciones antes de implementar funcionalidades avanzadas.

**PRIORIDAD M√ÅXIMA**: Estabilizar arquitectura base y CMS funcional antes de cualquier desarrollo adicional.

## üö® **ERRORES CR√çTICOS DE AUTENTICACI√ìN - USUARIOS ADMIN/EDITOR BLOQUEADOS**

### **PROBLEMA CR√çTICO INMEDIATO**
**Los usuarios administrador y editor NO PUEDEN ACCEDER al dashboard de administraci√≥n/CMS debido a errores graves en el sistema de autenticaci√≥n.**

### **CREDENCIALES DE PRUEBA (NO FUNCIONAN)**
- **Admin**: admin@qaservices.com / admin123
- **Editor CMS**: editor@qaservices.com / editor123
- **Estado**: Login exitoso pero acceso al dashboard DENEGADO

### **FLUJO DE ERROR COMPLETO**
1. ‚úÖ **Login exitoso**: Usuario se autentica correctamente
2. ‚úÖ **Token generado**: JWT v√°lido con roles correctos  
3. ‚úÖ **Cookie establecida**: `auth-token` guardada en navegador
4. ‚ùå **Redirecci√≥n falla**: Usuario va a `/admin` pero es interceptado
5. ‚ùå **Middleware bloquea**: Verificaci√≥n de token falla
6. ‚ùå **Loop infinito**: Usuario vuelve al login, nunca accede al dashboard

### **CAUSAS T√âCNICAS IDENTIFICADAS**

#### **1. JWT_SECRET Inconsistente (CR√çTICO)**
```typescript
// middleware.ts - Valor hardcodeado
const JWT_SECRET = 'tu-super-secret-jwt-key-cambiar-en-produccion';

// jwt.ts - Valor diferente
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';
```
**Consecuencia**: Tokens generados en login no pueden ser verificados en middleware

#### **2. Verificaci√≥n de Tokens Rota (CR√çTICO)**
```typescript
// middleware.ts - Verificaci√≥n incompleta
async function verifyTokenInMiddleware(token: string) {
  // Solo decodifica payload sin verificar firma
  const decodedPayload = JSON.parse(atob(payload)); // ‚ùå atob() no disponible en Edge Runtime
}
```
**Consecuencia**: Middleware falla al verificar tokens, bloqueando acceso

#### **3. Cookies Inconsistentes (ALTO)**
- **Sistema busca**: `auth-token`
- **Sistema establece**: `auth-token` pero con configuraci√≥n insegura
- **Conflicto**: Diferentes nombres y configuraciones

### **IMPACTO INMEDIATO**
- **CMS completamente inaccesible**: No se puede editar contenido del sitio
- **Panel de administraci√≥n bloqueado**: Administradores no pueden gestionar usuarios
- **Desarrollo paralizado**: Sin acceso al dashboard no se puede probar funcionalidad
- **Experiencia de usuario rota**: Login exitoso pero funcionalidad bloqueada

### **SOLUCIONES INMEDIATAS REQUERIDAS**

#### **Opci√≥n 1: Consolidar JWT Personalizado (1-2 d√≠as)**
1. **Unificar JWT_SECRET**: Mismo valor en todos los archivos
2. **Implementar verificaci√≥n real**: Usar `jwt.verify()` completo
3. **Corregir Edge Runtime**: Usar funciones compatibles

#### **Opci√≥n 2: Migrar a NextAuth.js v5 (3-5 d√≠as)**
1. **Eliminar sistema JWT personalizado**: Remover c√≥digo duplicado
2. **Configurar NextAuth.js v5**: Provider de credenciales
3. **Actualizar middleware**: Usar sesiones de NextAuth
4. **Corregir rutas protegidas**: Usar `auth()` de NextAuth

### **PRIORIDAD M√ÅXIMA**
**RESOLVER AUTENTICACI√ìN ANTES DE CUALQUIER DESARROLLO ADICIONAL**
- Sin acceso al dashboard, el proyecto est√° completamente bloqueado
- Requiere resoluci√≥n inmediata (m√°ximo 2 d√≠as)
- Bloquea todo el desarrollo del CMS y funcionalidades admin